(* File generated by CM-Yacc version 2.1 *)

functor VSIMPLParseFun
   (structure Streamable : STREAMABLE
    structure Arg :
       sig
          type string
          type int
          type aexp
          type bexp
          type cmd
          type cmdlist
          type program
          type identlist

          val args_cons : string * identlist -> identlist
          val args_one : string -> identlist
          val args : identlist -> identlist
          val args_empty : unit -> identlist
          val main : identlist * cmdlist -> program
          val cmd_cons : cmd * cmdlist -> cmdlist
          val cmd_one : cmd -> cmdlist
          val cmds_empty : unit -> cmdlist
          val cmds : cmdlist -> cmdlist
          val cmd_return : aexp -> cmd
          val cmd_while : bexp * cmdlist -> cmd
          val cmd_if : bexp * cmdlist -> cmd
          val cmd_if_else : bexp * cmdlist * cmdlist -> cmd
          val cmd_assign : string * aexp -> cmd
          val bexp_greater : aexp * aexp -> bexp
          val bexp_less : aexp * aexp -> bexp
          val bexp_notequal : aexp * aexp -> bexp
          val bexp_equal : aexp * aexp -> bexp
          val bexp_or : bexp * bexp -> bexp
          val bexp_and : bexp * bexp -> bexp
          val bexp_not : bexp -> bexp
          val bexp_false : unit -> bexp
          val bexp_true : unit -> bexp
          val bexp_id : bexp -> bexp
          val aexp_divide : aexp * aexp -> aexp
          val aexp_times : aexp * aexp -> aexp
          val aexp_minus : aexp * aexp -> aexp
          val aexp_plus : aexp * aexp -> aexp
          val aexp_number : int -> aexp
          val aexp_ident : string -> aexp
          val aexp_id : aexp -> aexp

          datatype terminal =
             IDENT of string
           | NUMBER of int
           | KWMAIN
           | KWIF
           | KWELSE
           | KWWHILE
           | KWRETURN
           | KWTRUE
           | KWFALSE
           | LBRACE
           | RBRACE
           | LPAREN
           | RPAREN
           | LAND
           | LOR
           | LNOT
           | LESS
           | GREATER
           | EQUAL
           | NOTEQUAL
           | ASSIGN
           | SEMI
           | COMMA
           | PLUS
           | MINUS
           | TIMES
           | DIVIDE

          val error : terminal Streamable.t -> exn
       end)
   :>
   sig
      val parse : Arg.terminal Streamable.t -> Arg.program * Arg.terminal Streamable.t
   end
=

(*

AUTOMATON LISTING
=================

State 0:

start -> . Program  / 0
26 : Program -> . KWMAIN Args Cmds  / 0

KWMAIN => shift 1
Program => goto 2

-----

State 1:

26 : Program -> KWMAIN . Args Cmds  / 0
27 : Args -> . LPAREN RPAREN  / 1
28 : Args -> . LPAREN Arglist RPAREN  / 1

LPAREN => shift 3
Args => goto 4

-----

State 2:

start -> Program .  / 0

$ => accept

-----

State 3:

27 : Args -> LPAREN . RPAREN  / 1
28 : Args -> LPAREN . Arglist RPAREN  / 1
29 : Arglist -> . IDENT  / 2
30 : Arglist -> . IDENT COMMA Arglist  / 2

IDENT => shift 5
RPAREN => shift 6
Arglist => goto 7

-----

State 4:

22 : Cmds -> . LBRACE Cmdlist RBRACE  / 0
23 : Cmds -> . LBRACE RBRACE  / 0
26 : Program -> KWMAIN Args . Cmds  / 0

LBRACE => shift 9
Cmds => goto 8

-----

State 5:

29 : Arglist -> IDENT .  / 2
30 : Arglist -> IDENT . COMMA Arglist  / 2

RPAREN => reduce 29
COMMA => shift 10

-----

State 6:

27 : Args -> LPAREN RPAREN .  / 1

LBRACE => reduce 27

-----

State 7:

28 : Args -> LPAREN Arglist . RPAREN  / 1

RPAREN => shift 11

-----

State 8:

26 : Program -> KWMAIN Args Cmds .  / 0

$ => reduce 26

-----

State 9:

17 : Cmd -> . IDENT ASSIGN Aexp SEMI  / 3
18 : Cmd -> . KWIF Bexp Cmds KWELSE Cmds  / 3
19 : Cmd -> . KWIF Bexp Cmds  / 3
20 : Cmd -> . KWWHILE Bexp Cmds  / 3
21 : Cmd -> . KWRETURN Aexp SEMI  / 3
22 : Cmds -> LBRACE . Cmdlist RBRACE  / 4
23 : Cmds -> LBRACE . RBRACE  / 4
24 : Cmdlist -> . Cmd  / 5
25 : Cmdlist -> . Cmd Cmdlist  / 5

IDENT => shift 17
KWIF => shift 16
KWWHILE => shift 15
KWRETURN => shift 14
RBRACE => shift 13
Cmd => goto 12
Cmdlist => goto 18

-----

State 10:

29 : Arglist -> . IDENT  / 2
30 : Arglist -> . IDENT COMMA Arglist  / 2
30 : Arglist -> IDENT COMMA . Arglist  / 2

IDENT => shift 5
Arglist => goto 19

-----

State 11:

28 : Args -> LPAREN Arglist RPAREN .  / 1

LBRACE => reduce 28

-----

State 12:

17 : Cmd -> . IDENT ASSIGN Aexp SEMI  / 3
18 : Cmd -> . KWIF Bexp Cmds KWELSE Cmds  / 3
19 : Cmd -> . KWIF Bexp Cmds  / 3
20 : Cmd -> . KWWHILE Bexp Cmds  / 3
21 : Cmd -> . KWRETURN Aexp SEMI  / 3
24 : Cmdlist -> . Cmd  / 5
24 : Cmdlist -> Cmd .  / 5
25 : Cmdlist -> . Cmd Cmdlist  / 5
25 : Cmdlist -> Cmd . Cmdlist  / 5

IDENT => shift 17
KWIF => shift 16
KWWHILE => shift 15
KWRETURN => shift 14
RBRACE => reduce 24
Cmd => goto 12
Cmdlist => goto 20

-----

State 13:

23 : Cmds -> LBRACE RBRACE .  / 4

$ => reduce 23
IDENT => reduce 23
KWIF => reduce 23
KWELSE => reduce 23
KWWHILE => reduce 23
KWRETURN => reduce 23
RBRACE => reduce 23

-----

State 14:

0 : Aexp -> . LPAREN Aexp RPAREN  / 6
1 : Aexp -> . IDENT  / 6
2 : Aexp -> . NUMBER  / 6
3 : Aexp -> . Aexp PLUS Aexp  / 6
4 : Aexp -> . Aexp MINUS Aexp  / 6
5 : Aexp -> . Aexp TIMES Aexp  / 6
6 : Aexp -> . Aexp DIVIDE Aexp  / 6
21 : Cmd -> KWRETURN . Aexp SEMI  / 3

IDENT => shift 24
NUMBER => shift 23
LPAREN => shift 22
Aexp => goto 21

-----

State 15:

0 : Aexp -> . LPAREN Aexp RPAREN  / 7
1 : Aexp -> . IDENT  / 7
2 : Aexp -> . NUMBER  / 7
3 : Aexp -> . Aexp PLUS Aexp  / 7
4 : Aexp -> . Aexp MINUS Aexp  / 7
5 : Aexp -> . Aexp TIMES Aexp  / 7
6 : Aexp -> . Aexp DIVIDE Aexp  / 7
7 : Bexp -> . LPAREN Bexp RPAREN  / 8
8 : Bexp -> . KWTRUE  / 8
9 : Bexp -> . KWFALSE  / 8
10 : Bexp -> . LNOT Bexp  / 8
11 : Bexp -> . Bexp LAND Bexp  / 8
12 : Bexp -> . Bexp LOR Bexp  / 8
13 : Bexp -> . Aexp EQUAL Aexp  / 8
14 : Bexp -> . Aexp NOTEQUAL Aexp  / 8
15 : Bexp -> . Aexp LESS Aexp  / 8
16 : Bexp -> . Aexp GREATER Aexp  / 8
20 : Cmd -> KWWHILE . Bexp Cmds  / 3

IDENT => shift 24
NUMBER => shift 23
KWTRUE => shift 30
KWFALSE => shift 29
LPAREN => shift 28
LNOT => shift 27
Aexp => goto 26
Bexp => goto 25

-----

State 16:

0 : Aexp -> . LPAREN Aexp RPAREN  / 7
1 : Aexp -> . IDENT  / 7
2 : Aexp -> . NUMBER  / 7
3 : Aexp -> . Aexp PLUS Aexp  / 7
4 : Aexp -> . Aexp MINUS Aexp  / 7
5 : Aexp -> . Aexp TIMES Aexp  / 7
6 : Aexp -> . Aexp DIVIDE Aexp  / 7
7 : Bexp -> . LPAREN Bexp RPAREN  / 8
8 : Bexp -> . KWTRUE  / 8
9 : Bexp -> . KWFALSE  / 8
10 : Bexp -> . LNOT Bexp  / 8
11 : Bexp -> . Bexp LAND Bexp  / 8
12 : Bexp -> . Bexp LOR Bexp  / 8
13 : Bexp -> . Aexp EQUAL Aexp  / 8
14 : Bexp -> . Aexp NOTEQUAL Aexp  / 8
15 : Bexp -> . Aexp LESS Aexp  / 8
16 : Bexp -> . Aexp GREATER Aexp  / 8
18 : Cmd -> KWIF . Bexp Cmds KWELSE Cmds  / 3
19 : Cmd -> KWIF . Bexp Cmds  / 3

IDENT => shift 24
NUMBER => shift 23
KWTRUE => shift 30
KWFALSE => shift 29
LPAREN => shift 28
LNOT => shift 27
Aexp => goto 26
Bexp => goto 31

-----

State 17:

17 : Cmd -> IDENT . ASSIGN Aexp SEMI  / 3

ASSIGN => shift 32

-----

State 18:

22 : Cmds -> LBRACE Cmdlist . RBRACE  / 4

RBRACE => shift 33

-----

State 19:

30 : Arglist -> IDENT COMMA Arglist .  / 2

RPAREN => reduce 30

-----

State 20:

25 : Cmdlist -> Cmd Cmdlist .  / 5

RBRACE => reduce 25

-----

State 21:

3 : Aexp -> Aexp . PLUS Aexp  / 6
4 : Aexp -> Aexp . MINUS Aexp  / 6
5 : Aexp -> Aexp . TIMES Aexp  / 6
6 : Aexp -> Aexp . DIVIDE Aexp  / 6
21 : Cmd -> KWRETURN Aexp . SEMI  / 3

SEMI => shift 34
PLUS => shift 35
MINUS => shift 37
TIMES => shift 38
DIVIDE => shift 36

-----

State 22:

0 : Aexp -> . LPAREN Aexp RPAREN  / 9
0 : Aexp -> LPAREN . Aexp RPAREN  / 10
1 : Aexp -> . IDENT  / 9
2 : Aexp -> . NUMBER  / 9
3 : Aexp -> . Aexp PLUS Aexp  / 9
4 : Aexp -> . Aexp MINUS Aexp  / 9
5 : Aexp -> . Aexp TIMES Aexp  / 9
6 : Aexp -> . Aexp DIVIDE Aexp  / 9

IDENT => shift 24
NUMBER => shift 23
LPAREN => shift 22
Aexp => goto 39

-----

State 23:

2 : Aexp -> NUMBER .  / 10

LBRACE => reduce 2
RPAREN => reduce 2
LAND => reduce 2
LOR => reduce 2
LESS => reduce 2
GREATER => reduce 2
EQUAL => reduce 2
NOTEQUAL => reduce 2
SEMI => reduce 2
PLUS => reduce 2
MINUS => reduce 2
TIMES => reduce 2
DIVIDE => reduce 2

-----

State 24:

1 : Aexp -> IDENT .  / 10

LBRACE => reduce 1
RPAREN => reduce 1
LAND => reduce 1
LOR => reduce 1
LESS => reduce 1
GREATER => reduce 1
EQUAL => reduce 1
NOTEQUAL => reduce 1
SEMI => reduce 1
PLUS => reduce 1
MINUS => reduce 1
TIMES => reduce 1
DIVIDE => reduce 1

-----

State 25:

11 : Bexp -> Bexp . LAND Bexp  / 8
12 : Bexp -> Bexp . LOR Bexp  / 8
20 : Cmd -> KWWHILE Bexp . Cmds  / 3
22 : Cmds -> . LBRACE Cmdlist RBRACE  / 3
23 : Cmds -> . LBRACE RBRACE  / 3

LBRACE => shift 9
LAND => shift 40
LOR => shift 41
Cmds => goto 42

-----

State 26:

3 : Aexp -> Aexp . PLUS Aexp  / 7
4 : Aexp -> Aexp . MINUS Aexp  / 7
5 : Aexp -> Aexp . TIMES Aexp  / 7
6 : Aexp -> Aexp . DIVIDE Aexp  / 7
13 : Bexp -> Aexp . EQUAL Aexp  / 11
14 : Bexp -> Aexp . NOTEQUAL Aexp  / 11
15 : Bexp -> Aexp . LESS Aexp  / 11
16 : Bexp -> Aexp . GREATER Aexp  / 11

LESS => shift 44
GREATER => shift 43
EQUAL => shift 45
NOTEQUAL => shift 46
PLUS => shift 35
MINUS => shift 37
TIMES => shift 38
DIVIDE => shift 36

-----

State 27:

0 : Aexp -> . LPAREN Aexp RPAREN  / 7
1 : Aexp -> . IDENT  / 7
2 : Aexp -> . NUMBER  / 7
3 : Aexp -> . Aexp PLUS Aexp  / 7
4 : Aexp -> . Aexp MINUS Aexp  / 7
5 : Aexp -> . Aexp TIMES Aexp  / 7
6 : Aexp -> . Aexp DIVIDE Aexp  / 7
7 : Bexp -> . LPAREN Bexp RPAREN  / 11
8 : Bexp -> . KWTRUE  / 11
9 : Bexp -> . KWFALSE  / 11
10 : Bexp -> . LNOT Bexp  / 11
10 : Bexp -> LNOT . Bexp  / 11
11 : Bexp -> . Bexp LAND Bexp  / 11
12 : Bexp -> . Bexp LOR Bexp  / 11
13 : Bexp -> . Aexp EQUAL Aexp  / 11
14 : Bexp -> . Aexp NOTEQUAL Aexp  / 11
15 : Bexp -> . Aexp LESS Aexp  / 11
16 : Bexp -> . Aexp GREATER Aexp  / 11

IDENT => shift 24
NUMBER => shift 23
KWTRUE => shift 30
KWFALSE => shift 29
LPAREN => shift 28
LNOT => shift 27
Aexp => goto 26
Bexp => goto 47

-----

State 28:

0 : Aexp -> . LPAREN Aexp RPAREN  / 12
0 : Aexp -> LPAREN . Aexp RPAREN  / 12
1 : Aexp -> . IDENT  / 12
2 : Aexp -> . NUMBER  / 12
3 : Aexp -> . Aexp PLUS Aexp  / 12
4 : Aexp -> . Aexp MINUS Aexp  / 12
5 : Aexp -> . Aexp TIMES Aexp  / 12
6 : Aexp -> . Aexp DIVIDE Aexp  / 12
7 : Bexp -> . LPAREN Bexp RPAREN  / 13
7 : Bexp -> LPAREN . Bexp RPAREN  / 11
8 : Bexp -> . KWTRUE  / 13
9 : Bexp -> . KWFALSE  / 13
10 : Bexp -> . LNOT Bexp  / 13
11 : Bexp -> . Bexp LAND Bexp  / 13
12 : Bexp -> . Bexp LOR Bexp  / 13
13 : Bexp -> . Aexp EQUAL Aexp  / 13
14 : Bexp -> . Aexp NOTEQUAL Aexp  / 13
15 : Bexp -> . Aexp LESS Aexp  / 13
16 : Bexp -> . Aexp GREATER Aexp  / 13

IDENT => shift 24
NUMBER => shift 23
KWTRUE => shift 30
KWFALSE => shift 29
LPAREN => shift 28
LNOT => shift 27
Aexp => goto 48
Bexp => goto 49

-----

State 29:

9 : Bexp -> KWFALSE .  / 11

LBRACE => reduce 9
RPAREN => reduce 9
LAND => reduce 9
LOR => reduce 9

-----

State 30:

8 : Bexp -> KWTRUE .  / 11

LBRACE => reduce 8
RPAREN => reduce 8
LAND => reduce 8
LOR => reduce 8

-----

State 31:

11 : Bexp -> Bexp . LAND Bexp  / 8
12 : Bexp -> Bexp . LOR Bexp  / 8
18 : Cmd -> KWIF Bexp . Cmds KWELSE Cmds  / 3
19 : Cmd -> KWIF Bexp . Cmds  / 3
22 : Cmds -> . LBRACE Cmdlist RBRACE  / 14
23 : Cmds -> . LBRACE RBRACE  / 14

LBRACE => shift 9
LAND => shift 40
LOR => shift 41
Cmds => goto 50

-----

State 32:

0 : Aexp -> . LPAREN Aexp RPAREN  / 6
1 : Aexp -> . IDENT  / 6
2 : Aexp -> . NUMBER  / 6
3 : Aexp -> . Aexp PLUS Aexp  / 6
4 : Aexp -> . Aexp MINUS Aexp  / 6
5 : Aexp -> . Aexp TIMES Aexp  / 6
6 : Aexp -> . Aexp DIVIDE Aexp  / 6
17 : Cmd -> IDENT ASSIGN . Aexp SEMI  / 3

IDENT => shift 24
NUMBER => shift 23
LPAREN => shift 22
Aexp => goto 51

-----

State 33:

22 : Cmds -> LBRACE Cmdlist RBRACE .  / 4

$ => reduce 22
IDENT => reduce 22
KWIF => reduce 22
KWELSE => reduce 22
KWWHILE => reduce 22
KWRETURN => reduce 22
RBRACE => reduce 22

-----

State 34:

21 : Cmd -> KWRETURN Aexp SEMI .  / 3

IDENT => reduce 21
KWIF => reduce 21
KWWHILE => reduce 21
KWRETURN => reduce 21
RBRACE => reduce 21

-----

State 35:

0 : Aexp -> . LPAREN Aexp RPAREN  / 10
1 : Aexp -> . IDENT  / 10
2 : Aexp -> . NUMBER  / 10
3 : Aexp -> . Aexp PLUS Aexp  / 10
3 : Aexp -> Aexp PLUS . Aexp  / 10
4 : Aexp -> . Aexp MINUS Aexp  / 10
5 : Aexp -> . Aexp TIMES Aexp  / 10
6 : Aexp -> . Aexp DIVIDE Aexp  / 10

IDENT => shift 24
NUMBER => shift 23
LPAREN => shift 22
Aexp => goto 52

-----

State 36:

0 : Aexp -> . LPAREN Aexp RPAREN  / 10
1 : Aexp -> . IDENT  / 10
2 : Aexp -> . NUMBER  / 10
3 : Aexp -> . Aexp PLUS Aexp  / 10
4 : Aexp -> . Aexp MINUS Aexp  / 10
5 : Aexp -> . Aexp TIMES Aexp  / 10
6 : Aexp -> . Aexp DIVIDE Aexp  / 10
6 : Aexp -> Aexp DIVIDE . Aexp  / 10

IDENT => shift 24
NUMBER => shift 23
LPAREN => shift 22
Aexp => goto 53

-----

State 37:

0 : Aexp -> . LPAREN Aexp RPAREN  / 10
1 : Aexp -> . IDENT  / 10
2 : Aexp -> . NUMBER  / 10
3 : Aexp -> . Aexp PLUS Aexp  / 10
4 : Aexp -> . Aexp MINUS Aexp  / 10
4 : Aexp -> Aexp MINUS . Aexp  / 10
5 : Aexp -> . Aexp TIMES Aexp  / 10
6 : Aexp -> . Aexp DIVIDE Aexp  / 10

IDENT => shift 24
NUMBER => shift 23
LPAREN => shift 22
Aexp => goto 54

-----

State 38:

0 : Aexp -> . LPAREN Aexp RPAREN  / 10
1 : Aexp -> . IDENT  / 10
2 : Aexp -> . NUMBER  / 10
3 : Aexp -> . Aexp PLUS Aexp  / 10
4 : Aexp -> . Aexp MINUS Aexp  / 10
5 : Aexp -> . Aexp TIMES Aexp  / 10
5 : Aexp -> Aexp TIMES . Aexp  / 10
6 : Aexp -> . Aexp DIVIDE Aexp  / 10

IDENT => shift 24
NUMBER => shift 23
LPAREN => shift 22
Aexp => goto 55

-----

State 39:

0 : Aexp -> LPAREN Aexp . RPAREN  / 10
3 : Aexp -> Aexp . PLUS Aexp  / 9
4 : Aexp -> Aexp . MINUS Aexp  / 9
5 : Aexp -> Aexp . TIMES Aexp  / 9
6 : Aexp -> Aexp . DIVIDE Aexp  / 9

RPAREN => shift 56
PLUS => shift 35
MINUS => shift 37
TIMES => shift 38
DIVIDE => shift 36

-----

State 40:

0 : Aexp -> . LPAREN Aexp RPAREN  / 7
1 : Aexp -> . IDENT  / 7
2 : Aexp -> . NUMBER  / 7
3 : Aexp -> . Aexp PLUS Aexp  / 7
4 : Aexp -> . Aexp MINUS Aexp  / 7
5 : Aexp -> . Aexp TIMES Aexp  / 7
6 : Aexp -> . Aexp DIVIDE Aexp  / 7
7 : Bexp -> . LPAREN Bexp RPAREN  / 11
8 : Bexp -> . KWTRUE  / 11
9 : Bexp -> . KWFALSE  / 11
10 : Bexp -> . LNOT Bexp  / 11
11 : Bexp -> . Bexp LAND Bexp  / 11
11 : Bexp -> Bexp LAND . Bexp  / 11
12 : Bexp -> . Bexp LOR Bexp  / 11
13 : Bexp -> . Aexp EQUAL Aexp  / 11
14 : Bexp -> . Aexp NOTEQUAL Aexp  / 11
15 : Bexp -> . Aexp LESS Aexp  / 11
16 : Bexp -> . Aexp GREATER Aexp  / 11

IDENT => shift 24
NUMBER => shift 23
KWTRUE => shift 30
KWFALSE => shift 29
LPAREN => shift 28
LNOT => shift 27
Aexp => goto 26
Bexp => goto 57

-----

State 41:

0 : Aexp -> . LPAREN Aexp RPAREN  / 7
1 : Aexp -> . IDENT  / 7
2 : Aexp -> . NUMBER  / 7
3 : Aexp -> . Aexp PLUS Aexp  / 7
4 : Aexp -> . Aexp MINUS Aexp  / 7
5 : Aexp -> . Aexp TIMES Aexp  / 7
6 : Aexp -> . Aexp DIVIDE Aexp  / 7
7 : Bexp -> . LPAREN Bexp RPAREN  / 11
8 : Bexp -> . KWTRUE  / 11
9 : Bexp -> . KWFALSE  / 11
10 : Bexp -> . LNOT Bexp  / 11
11 : Bexp -> . Bexp LAND Bexp  / 11
12 : Bexp -> . Bexp LOR Bexp  / 11
12 : Bexp -> Bexp LOR . Bexp  / 11
13 : Bexp -> . Aexp EQUAL Aexp  / 11
14 : Bexp -> . Aexp NOTEQUAL Aexp  / 11
15 : Bexp -> . Aexp LESS Aexp  / 11
16 : Bexp -> . Aexp GREATER Aexp  / 11

IDENT => shift 24
NUMBER => shift 23
KWTRUE => shift 30
KWFALSE => shift 29
LPAREN => shift 28
LNOT => shift 27
Aexp => goto 26
Bexp => goto 58

-----

State 42:

20 : Cmd -> KWWHILE Bexp Cmds .  / 3

IDENT => reduce 20
KWIF => reduce 20
KWWHILE => reduce 20
KWRETURN => reduce 20
RBRACE => reduce 20

-----

State 43:

0 : Aexp -> . LPAREN Aexp RPAREN  / 15
1 : Aexp -> . IDENT  / 15
2 : Aexp -> . NUMBER  / 15
3 : Aexp -> . Aexp PLUS Aexp  / 15
4 : Aexp -> . Aexp MINUS Aexp  / 15
5 : Aexp -> . Aexp TIMES Aexp  / 15
6 : Aexp -> . Aexp DIVIDE Aexp  / 15
16 : Bexp -> Aexp GREATER . Aexp  / 11

IDENT => shift 24
NUMBER => shift 23
LPAREN => shift 22
Aexp => goto 59

-----

State 44:

0 : Aexp -> . LPAREN Aexp RPAREN  / 15
1 : Aexp -> . IDENT  / 15
2 : Aexp -> . NUMBER  / 15
3 : Aexp -> . Aexp PLUS Aexp  / 15
4 : Aexp -> . Aexp MINUS Aexp  / 15
5 : Aexp -> . Aexp TIMES Aexp  / 15
6 : Aexp -> . Aexp DIVIDE Aexp  / 15
15 : Bexp -> Aexp LESS . Aexp  / 11

IDENT => shift 24
NUMBER => shift 23
LPAREN => shift 22
Aexp => goto 60

-----

State 45:

0 : Aexp -> . LPAREN Aexp RPAREN  / 15
1 : Aexp -> . IDENT  / 15
2 : Aexp -> . NUMBER  / 15
3 : Aexp -> . Aexp PLUS Aexp  / 15
4 : Aexp -> . Aexp MINUS Aexp  / 15
5 : Aexp -> . Aexp TIMES Aexp  / 15
6 : Aexp -> . Aexp DIVIDE Aexp  / 15
13 : Bexp -> Aexp EQUAL . Aexp  / 11

IDENT => shift 24
NUMBER => shift 23
LPAREN => shift 22
Aexp => goto 61

-----

State 46:

0 : Aexp -> . LPAREN Aexp RPAREN  / 15
1 : Aexp -> . IDENT  / 15
2 : Aexp -> . NUMBER  / 15
3 : Aexp -> . Aexp PLUS Aexp  / 15
4 : Aexp -> . Aexp MINUS Aexp  / 15
5 : Aexp -> . Aexp TIMES Aexp  / 15
6 : Aexp -> . Aexp DIVIDE Aexp  / 15
14 : Bexp -> Aexp NOTEQUAL . Aexp  / 11

IDENT => shift 24
NUMBER => shift 23
LPAREN => shift 22
Aexp => goto 62

-----

State 47:

10 : Bexp -> LNOT Bexp .  / 11
11 : Bexp -> Bexp . LAND Bexp  / 11
12 : Bexp -> Bexp . LOR Bexp  / 11

LBRACE => reduce 10
RPAREN => reduce 10
LAND => reduce 10, shift 40  PRECEDENCE
LOR => reduce 10, shift 41  PRECEDENCE

-----

State 48:

0 : Aexp -> LPAREN Aexp . RPAREN  / 12
3 : Aexp -> Aexp . PLUS Aexp  / 12
4 : Aexp -> Aexp . MINUS Aexp  / 12
5 : Aexp -> Aexp . TIMES Aexp  / 12
6 : Aexp -> Aexp . DIVIDE Aexp  / 12
13 : Bexp -> Aexp . EQUAL Aexp  / 13
14 : Bexp -> Aexp . NOTEQUAL Aexp  / 13
15 : Bexp -> Aexp . LESS Aexp  / 13
16 : Bexp -> Aexp . GREATER Aexp  / 13

RPAREN => shift 56
LESS => shift 44
GREATER => shift 43
EQUAL => shift 45
NOTEQUAL => shift 46
PLUS => shift 35
MINUS => shift 37
TIMES => shift 38
DIVIDE => shift 36

-----

State 49:

7 : Bexp -> LPAREN Bexp . RPAREN  / 11
11 : Bexp -> Bexp . LAND Bexp  / 13
12 : Bexp -> Bexp . LOR Bexp  / 13

RPAREN => shift 63
LAND => shift 40
LOR => shift 41

-----

State 50:

18 : Cmd -> KWIF Bexp Cmds . KWELSE Cmds  / 3
19 : Cmd -> KWIF Bexp Cmds .  / 3

IDENT => reduce 19
KWIF => reduce 19
KWELSE => shift 64
KWWHILE => reduce 19
KWRETURN => reduce 19
RBRACE => reduce 19

-----

State 51:

3 : Aexp -> Aexp . PLUS Aexp  / 6
4 : Aexp -> Aexp . MINUS Aexp  / 6
5 : Aexp -> Aexp . TIMES Aexp  / 6
6 : Aexp -> Aexp . DIVIDE Aexp  / 6
17 : Cmd -> IDENT ASSIGN Aexp . SEMI  / 3

SEMI => shift 65
PLUS => shift 35
MINUS => shift 37
TIMES => shift 38
DIVIDE => shift 36

-----

State 52:

3 : Aexp -> Aexp . PLUS Aexp  / 10
3 : Aexp -> Aexp PLUS Aexp .  / 10
4 : Aexp -> Aexp . MINUS Aexp  / 10
5 : Aexp -> Aexp . TIMES Aexp  / 10
6 : Aexp -> Aexp . DIVIDE Aexp  / 10

LBRACE => reduce 3
RPAREN => reduce 3
LAND => reduce 3
LOR => reduce 3
LESS => reduce 3
GREATER => reduce 3
EQUAL => reduce 3
NOTEQUAL => reduce 3
SEMI => reduce 3
PLUS => shift 35, reduce 3  PRECEDENCE
MINUS => shift 37, reduce 3  PRECEDENCE
TIMES => shift 38, reduce 3  PRECEDENCE
DIVIDE => shift 36, reduce 3  PRECEDENCE

-----

State 53:

3 : Aexp -> Aexp . PLUS Aexp  / 10
4 : Aexp -> Aexp . MINUS Aexp  / 10
5 : Aexp -> Aexp . TIMES Aexp  / 10
6 : Aexp -> Aexp . DIVIDE Aexp  / 10
6 : Aexp -> Aexp DIVIDE Aexp .  / 10

LBRACE => reduce 6
RPAREN => reduce 6
LAND => reduce 6
LOR => reduce 6
LESS => reduce 6
GREATER => reduce 6
EQUAL => reduce 6
NOTEQUAL => reduce 6
SEMI => reduce 6
PLUS => reduce 6, shift 35  PRECEDENCE
MINUS => reduce 6, shift 37  PRECEDENCE
TIMES => shift 38, reduce 6  PRECEDENCE
DIVIDE => shift 36, reduce 6  PRECEDENCE

-----

State 54:

3 : Aexp -> Aexp . PLUS Aexp  / 10
4 : Aexp -> Aexp . MINUS Aexp  / 10
4 : Aexp -> Aexp MINUS Aexp .  / 10
5 : Aexp -> Aexp . TIMES Aexp  / 10
6 : Aexp -> Aexp . DIVIDE Aexp  / 10

LBRACE => reduce 4
RPAREN => reduce 4
LAND => reduce 4
LOR => reduce 4
LESS => reduce 4
GREATER => reduce 4
EQUAL => reduce 4
NOTEQUAL => reduce 4
SEMI => reduce 4
PLUS => shift 35, reduce 4  PRECEDENCE
MINUS => shift 37, reduce 4  PRECEDENCE
TIMES => shift 38, reduce 4  PRECEDENCE
DIVIDE => shift 36, reduce 4  PRECEDENCE

-----

State 55:

3 : Aexp -> Aexp . PLUS Aexp  / 10
4 : Aexp -> Aexp . MINUS Aexp  / 10
5 : Aexp -> Aexp . TIMES Aexp  / 10
5 : Aexp -> Aexp TIMES Aexp .  / 10
6 : Aexp -> Aexp . DIVIDE Aexp  / 10

LBRACE => reduce 5
RPAREN => reduce 5
LAND => reduce 5
LOR => reduce 5
LESS => reduce 5
GREATER => reduce 5
EQUAL => reduce 5
NOTEQUAL => reduce 5
SEMI => reduce 5
PLUS => reduce 5, shift 35  PRECEDENCE
MINUS => reduce 5, shift 37  PRECEDENCE
TIMES => shift 38, reduce 5  PRECEDENCE
DIVIDE => shift 36, reduce 5  PRECEDENCE

-----

State 56:

0 : Aexp -> LPAREN Aexp RPAREN .  / 10

LBRACE => reduce 0
RPAREN => reduce 0
LAND => reduce 0
LOR => reduce 0
LESS => reduce 0
GREATER => reduce 0
EQUAL => reduce 0
NOTEQUAL => reduce 0
SEMI => reduce 0
PLUS => reduce 0
MINUS => reduce 0
TIMES => reduce 0
DIVIDE => reduce 0

-----

State 57:

11 : Bexp -> Bexp . LAND Bexp  / 11
11 : Bexp -> Bexp LAND Bexp .  / 11
12 : Bexp -> Bexp . LOR Bexp  / 11

LBRACE => reduce 11
RPAREN => reduce 11
LAND => reduce 11, shift 40  PRECEDENCE
LOR => reduce 11, shift 41  PRECEDENCE

-----

State 58:

11 : Bexp -> Bexp . LAND Bexp  / 11
12 : Bexp -> Bexp . LOR Bexp  / 11
12 : Bexp -> Bexp LOR Bexp .  / 11

LBRACE => reduce 12
RPAREN => reduce 12
LAND => shift 40, reduce 12  PRECEDENCE
LOR => reduce 12, shift 41  PRECEDENCE

-----

State 59:

3 : Aexp -> Aexp . PLUS Aexp  / 15
4 : Aexp -> Aexp . MINUS Aexp  / 15
5 : Aexp -> Aexp . TIMES Aexp  / 15
6 : Aexp -> Aexp . DIVIDE Aexp  / 15
16 : Bexp -> Aexp GREATER Aexp .  / 11

LBRACE => reduce 16
RPAREN => reduce 16
LAND => reduce 16
LOR => reduce 16
PLUS => shift 35
MINUS => shift 37
TIMES => shift 38
DIVIDE => shift 36

-----

State 60:

3 : Aexp -> Aexp . PLUS Aexp  / 15
4 : Aexp -> Aexp . MINUS Aexp  / 15
5 : Aexp -> Aexp . TIMES Aexp  / 15
6 : Aexp -> Aexp . DIVIDE Aexp  / 15
15 : Bexp -> Aexp LESS Aexp .  / 11

LBRACE => reduce 15
RPAREN => reduce 15
LAND => reduce 15
LOR => reduce 15
PLUS => shift 35
MINUS => shift 37
TIMES => shift 38
DIVIDE => shift 36

-----

State 61:

3 : Aexp -> Aexp . PLUS Aexp  / 15
4 : Aexp -> Aexp . MINUS Aexp  / 15
5 : Aexp -> Aexp . TIMES Aexp  / 15
6 : Aexp -> Aexp . DIVIDE Aexp  / 15
13 : Bexp -> Aexp EQUAL Aexp .  / 11

LBRACE => reduce 13
RPAREN => reduce 13
LAND => reduce 13
LOR => reduce 13
PLUS => shift 35
MINUS => shift 37
TIMES => shift 38
DIVIDE => shift 36

-----

State 62:

3 : Aexp -> Aexp . PLUS Aexp  / 15
4 : Aexp -> Aexp . MINUS Aexp  / 15
5 : Aexp -> Aexp . TIMES Aexp  / 15
6 : Aexp -> Aexp . DIVIDE Aexp  / 15
14 : Bexp -> Aexp NOTEQUAL Aexp .  / 11

LBRACE => reduce 14
RPAREN => reduce 14
LAND => reduce 14
LOR => reduce 14
PLUS => shift 35
MINUS => shift 37
TIMES => shift 38
DIVIDE => shift 36

-----

State 63:

7 : Bexp -> LPAREN Bexp RPAREN .  / 11

LBRACE => reduce 7
RPAREN => reduce 7
LAND => reduce 7
LOR => reduce 7

-----

State 64:

18 : Cmd -> KWIF Bexp Cmds KWELSE . Cmds  / 3
22 : Cmds -> . LBRACE Cmdlist RBRACE  / 3
23 : Cmds -> . LBRACE RBRACE  / 3

LBRACE => shift 9
Cmds => goto 66

-----

State 65:

17 : Cmd -> IDENT ASSIGN Aexp SEMI .  / 3

IDENT => reduce 17
KWIF => reduce 17
KWWHILE => reduce 17
KWRETURN => reduce 17
RBRACE => reduce 17

-----

State 66:

18 : Cmd -> KWIF Bexp Cmds KWELSE Cmds .  / 3

IDENT => reduce 18
KWIF => reduce 18
KWWHILE => reduce 18
KWRETURN => reduce 18
RBRACE => reduce 18

-----

lookahead 0 = $ 
lookahead 1 = LBRACE 
lookahead 2 = RPAREN 
lookahead 3 = IDENT KWIF KWWHILE KWRETURN RBRACE 
lookahead 4 = $ IDENT KWIF KWELSE KWWHILE KWRETURN RBRACE 
lookahead 5 = RBRACE 
lookahead 6 = SEMI PLUS MINUS TIMES DIVIDE 
lookahead 7 = LESS GREATER EQUAL NOTEQUAL PLUS MINUS TIMES DIVIDE 
lookahead 8 = LBRACE LAND LOR 
lookahead 9 = RPAREN PLUS MINUS TIMES DIVIDE 
lookahead 10 = LBRACE RPAREN LAND LOR LESS GREATER EQUAL NOTEQUAL SEMI PLUS MINUS TIMES DIVIDE 
lookahead 11 = LBRACE RPAREN LAND LOR 
lookahead 12 = RPAREN LESS GREATER EQUAL NOTEQUAL PLUS MINUS TIMES DIVIDE 
lookahead 13 = RPAREN LAND LOR 
lookahead 14 = IDENT KWIF KWELSE KWWHILE KWRETURN RBRACE 
lookahead 15 = LBRACE RPAREN LAND LOR PLUS MINUS TIMES DIVIDE 

*)

struct
local
structure Value = struct
datatype nonterminal =
nonterminal
| string of Arg.string
| int of Arg.int
| aexp of Arg.aexp
| bexp of Arg.bexp
| cmd of Arg.cmd
| cmdlist of Arg.cmdlist
| program of Arg.program
| identlist of Arg.identlist
end
structure ParseEngine = ParseEngineFun (structure Streamable = Streamable
type terminal = Arg.terminal
type value = Value.nonterminal
val dummy = Value.nonterminal
fun read terminal =
(case terminal of
Arg.IDENT x => (1, Value.string x)
| Arg.NUMBER x => (2, Value.int x)
| Arg.KWMAIN => (3, Value.nonterminal)
| Arg.KWIF => (4, Value.nonterminal)
| Arg.KWELSE => (5, Value.nonterminal)
| Arg.KWWHILE => (6, Value.nonterminal)
| Arg.KWRETURN => (7, Value.nonterminal)
| Arg.KWTRUE => (8, Value.nonterminal)
| Arg.KWFALSE => (9, Value.nonterminal)
| Arg.LBRACE => (10, Value.nonterminal)
| Arg.RBRACE => (11, Value.nonterminal)
| Arg.LPAREN => (12, Value.nonterminal)
| Arg.RPAREN => (13, Value.nonterminal)
| Arg.LAND => (14, Value.nonterminal)
| Arg.LOR => (15, Value.nonterminal)
| Arg.LNOT => (16, Value.nonterminal)
| Arg.LESS => (17, Value.nonterminal)
| Arg.GREATER => (18, Value.nonterminal)
| Arg.EQUAL => (19, Value.nonterminal)
| Arg.NOTEQUAL => (20, Value.nonterminal)
| Arg.ASSIGN => (21, Value.nonterminal)
| Arg.SEMI => (22, Value.nonterminal)
| Arg.COMMA => (23, Value.nonterminal)
| Arg.PLUS => (24, Value.nonterminal)
| Arg.MINUS => (25, Value.nonterminal)
| Arg.TIMES => (26, Value.nonterminal)
| Arg.DIVIDE => (27, Value.nonterminal)
)
)
in
val parse = ParseEngine.parse (
ParseEngine.next5x1 "\128\128\128\130\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\132\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\127\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\134\128\128\128\128\128\128\128\128\128\128\128\135\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\138\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128a\128\128\128\128\128\128\128\128\128\139\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128c\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\140\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128d\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\146\128\128\145\128\144\143\128\128\128\142\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\134\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128b\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\146\128\128\145\128\144\143\128\128\128f\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128gg\128\128gggg\128\128\128g\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\153\152\128\128\128\128\128\128\128\128\128\151\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\153\152\128\128\128\128\128\159\158\128\128\157\128\128\128\156\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\153\152\128\128\128\128\128\159\158\128\128\157\128\128\128\156\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\161\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\162\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128`\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128e\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\163\128\164\166\167\165\128\128\128\128\128\153\152\128\128\128\128\128\128\128\128\128\151\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128|\128\128|||\128||||\128|\128||||\128\128\128\128\128\128\128\128\128\128\128\128\128\128}\128\128}}}\128}}}}\128}\128}}}}u\128\128uuu\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128v\128\128vvv\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\138\128\128\128\169\170\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\153\152\128\128\128\128\128\128\128\128\128\151\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128hh\128\128hhhh\128\128\128h\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128i\128\128i\128ii\128\128\128ij\128\128j\128jj\128\128\128jt\128\128ttt\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\185\128\128\128\173\172\174\175\128\128\128\164\166\167\165\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\192\169\170\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128k\128\128k\193kk\128\128\128k\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\194\128\164\166\167\165\128\128\128\128\128\128\128\128\128\128\128\128\128\128{\128\128{{{\128{{{{\128{\128\164\166\167\165\128\128\128\128\128\128\128\128\128\128\128\128\128\128x\128\128xxx\128xxxx\128x\128xx\167\165\128\128\128\128\128\128\128\128\128\128\128\128\128\128z\128\128zzz\128zzzz\128z\128\164\166\167\165\128\128\128\128\128\128\128\128\128\128\128\128\128\128y\128\128yyy\128yyyy\128y\128yy\167\165\128\128\128\128\128\128\128\128\128\128\128\128\128\128~\128\128~~~\128~~~~\128~\128~~~~\128\128\128\128\128\128\128\128\128\128\128\128\128\128s\128\128sss\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128r\128\128r\169r\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128n\128\128nnn\128\128\128\128\128\128\128\128\164\166\167\165\128\128\128\128\128\128\128\128\128\128\128\128\128\128o\128\128ooo\128\128\128\128\128\128\128\128\164\166\167\165\128\128\128\128\128\128\128\128\128\128\128\128\128\128q\128\128qqq\128\128\128\128\128\128\128\128\164\166\167\165\128\128\128\128\128\128\128\128\128\128\128\128\128\128p\128\128ppp\128\128\128\128\128\128\128\128\164\166\167\165\128\128\128\128\128\128\128\128\128\128\128\128\128\128w\128\128www\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\138\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128m\128\128m\128mm\128\128\128m\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128l\128\128l\128ll\128\128\128l\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128",
ParseEngine.next5x
Vector.fromList [(0,3,(fn _::Value.aexp(arg0)::_::rest => Value.aexp(Arg.aexp_id arg0)::rest|_=>raise (Fail "bad parser"))),
(0,1,(fn Value.string(arg0)::rest => Value.aexp(Arg.aexp_ident arg0)::rest|_=>raise (Fail "bad parser"))),
(0,1,(fn Value.int(arg0)::rest => Value.aexp(Arg.aexp_number arg0)::rest|_=>raise (Fail "bad parser"))),
(0,3,(fn Value.aexp(arg0)::_::Value.aexp(arg1)::rest => Value.aexp(Arg.aexp_plus {2=arg0,1=arg1})::rest|_=>raise (Fail "bad parser"))),
(0,3,(fn Value.aexp(arg0)::_::Value.aexp(arg1)::rest => Value.aexp(Arg.aexp_minus {2=arg0,1=arg1})::rest|_=>raise (Fail "bad parser"))),
(0,3,(fn Value.aexp(arg0)::_::Value.aexp(arg1)::rest => Value.aexp(Arg.aexp_times {2=arg0,1=arg1})::rest|_=>raise (Fail "bad parser"))),
(0,3,(fn Value.aexp(arg0)::_::Value.aexp(arg1)::rest => Value.aexp(Arg.aexp_divide {2=arg0,1=arg1})::rest|_=>raise (Fail "bad parser"))),
(1,3,(fn _::Value.bexp(arg0)::_::rest => Value.bexp(Arg.bexp_id arg0)::rest|_=>raise (Fail "bad parser"))),
(1,1,(fn _::rest => Value.bexp(Arg.bexp_true {})::rest|_=>raise (Fail "bad parser"))),
(1,1,(fn _::rest => Value.bexp(Arg.bexp_false {})::rest|_=>raise (Fail "bad parser"))),
(1,2,(fn Value.bexp(arg0)::_::rest => Value.bexp(Arg.bexp_not arg0)::rest|_=>raise (Fail "bad parser"))),
(1,3,(fn Value.bexp(arg0)::_::Value.bexp(arg1)::rest => Value.bexp(Arg.bexp_and {2=arg0,1=arg1})::rest|_=>raise (Fail "bad parser"))),
(1,3,(fn Value.bexp(arg0)::_::Value.bexp(arg1)::rest => Value.bexp(Arg.bexp_or {2=arg0,1=arg1})::rest|_=>raise (Fail "bad parser"))),
(1,3,(fn Value.aexp(arg0)::_::Value.aexp(arg1)::rest => Value.bexp(Arg.bexp_equal {2=arg0,1=arg1})::rest|_=>raise (Fail "bad parser"))),
(1,3,(fn Value.aexp(arg0)::_::Value.aexp(arg1)::rest => Value.bexp(Arg.bexp_notequal {2=arg0,1=arg1})::rest|_=>raise (Fail "bad parser"))),
(1,3,(fn Value.aexp(arg0)::_::Value.aexp(arg1)::rest => Value.bexp(Arg.bexp_less {2=arg0,1=arg1})::rest|_=>raise (Fail "bad parser"))),
(1,3,(fn Value.aexp(arg0)::_::Value.aexp(arg1)::rest => Value.bexp(Arg.bexp_greater {2=arg0,1=arg1})::rest|_=>raise (Fail "bad parser"))),
(2,4,(fn _::Value.aexp(arg0)::_::Value.string(arg1)::rest => Value.cmd(Arg.cmd_assign {2=arg0,1=arg1})::rest|_=>raise (Fail "bad parser"))),
(2,5,(fn Value.cmdlist(arg0)::_::Value.cmdlist(arg1)::Value.bexp(arg2)::_::rest => Value.cmd(Arg.cmd_if_else {3=arg0,2=arg1,1=arg2})::rest|_=>raise (Fail "bad parser"))),
(2,3,(fn Value.cmdlist(arg0)::Value.bexp(arg1)::_::rest => Value.cmd(Arg.cmd_if {2=arg0,1=arg1})::rest|_=>raise (Fail "bad parser"))),
(2,3,(fn Value.cmdlist(arg0)::Value.bexp(arg1)::_::rest => Value.cmd(Arg.cmd_while {2=arg0,1=arg1})::rest|_=>raise (Fail "bad parser"))),
(2,3,(fn _::Value.aexp(arg0)::_::rest => Value.cmd(Arg.cmd_return arg0)::rest|_=>raise (Fail "bad parser"))),
(3,3,(fn _::Value.cmdlist(arg0)::_::rest => Value.cmdlist(Arg.cmds arg0)::rest|_=>raise (Fail "bad parser"))),
(3,2,(fn _::_::rest => Value.cmdlist(Arg.cmds_empty {})::rest|_=>raise (Fail "bad parser"))),
(4,1,(fn Value.cmd(arg0)::rest => Value.cmdlist(Arg.cmd_one arg0)::rest|_=>raise (Fail "bad parser"))),
(4,2,(fn Value.cmdlist(arg0)::Value.cmd(arg1)::rest => Value.cmdlist(Arg.cmd_cons {2=arg0,1=arg1})::rest|_=>raise (Fail "bad parser"))),
(5,3,(fn Value.cmdlist(arg0)::Value.identlist(arg1)::_::rest => Value.program(Arg.main {2=arg0,1=arg1})::rest|_=>raise (Fail "bad parser"))),
(6,2,(fn _::_::rest => Value.identlist(Arg.args_empty {})::rest|_=>raise (Fail "bad parser"))),
(6,3,(fn _::Value.identlist(arg0)::_::rest => Value.identlist(Arg.args arg0)::rest|_=>raise (Fail "bad parser"))),
(7,1,(fn Value.string(arg0)::rest => Value.identlist(Arg.args_one arg0)::rest|_=>raise (Fail "bad parser"))),
(7,3,(fn Value.identlist(arg0)::_::Value.string(arg1)::rest => Value.identlist(Arg.args_cons {2=arg0,1=arg1})::rest|_=>raise (Fail "bad parser")))],
(fn Value.program x => x | _ => raise (Fail "bad parser")), Arg.error)
end
end
